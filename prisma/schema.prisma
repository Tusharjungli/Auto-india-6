generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  wishlist    WishlistItem[]
  description String?
  price       Int
  imageUrl    String
  stock       Int
  category    String?
  createdAt   DateTime @default(now())

  reviews     Review[]
}

model User {
  id             String   @id @default(cuid())
  name           String?
  email          String   @unique
  emailVerified  DateTime?
  image          String?
  password       String?   // For credentials login only
  address        String?
  phone          String?
  wishlist       WishlistItem[]
  notifications Notification[]

  accounts       Account[]
  sessions       Session[]
  cartItems      CartItem[]
  orders         Order[]
  createdAt      DateTime  @default(now())

  reviews        Review[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
  createdAt DateTime @default(now())
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  total     Float
  status    String   @default("pending")
  createdAt DateTime @default(now())
  items     OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  name      String
  price     Float
  quantity  Int

  order     Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Feedback {
  id        String   @id @default(uuid())
  name      String?
  email     String?
  phone     String?
  category  String?
  message   String
  createdAt DateTime @default(now())
}

model WishlistItem {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String

  @@unique([userId, productId]) // prevent duplicates
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  text      String
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}




